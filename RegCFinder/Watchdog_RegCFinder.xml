<?xml version="1.0" encoding="UTF-8"?>
<!-- Copyright (C) 2023 Elena WeiÃŸ -->
<!-- licensed as GPLv3 -->
<!-- TODO: change installation path of watchdog -->
<watchdog xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" watchdogBase="/path/to/watchdog/" xsi:noNamespaceSchemaLocation="watchdog.xsd">
	<settings>
		<constants>
			<!-- input data-->
			<!-- TODO: change to path to input directory containing BAM files, sample annotation and target windows-->
			<const name="inputDir">/path/to/example_input/</const>
			<const name="bamfolder">${inputDir}/bamfiles/</const>
			<const name="sampleanno">${inputDir}/sampleanno.txt</const>
			<const name="regs">${inputDir}/regs.bed</const>
			<!-- output -->
			<!-- TODO: change path to output directory-->
			<const name="outputDir">/path/to/example_output/</const>
			<const name="LOGS">${outputDir}/logfiles</const>
			<!-- global parameters -->
			<!-- TODO: change to strandness of experiment, either 0,1 or 2-->
			<const name="strandness">2</const>
			<!-- TODO: change to name for test condition-->
			<const name="test">WT</const>
			<!-- TODO: change to name of control condition-->
			<const name="control">mock</const>
			<const name="pseudocount">1</const>
			<const name="numrandomizations">1000</const>
			<!--TODO: change the path to the directory in which you want to store the conda environments for the individual tasks -->
			<const name="CONDA_ENV_PATH">/path/to/conda_watchdog_env/</const>
		</constants>
		<wrappers>
			<!-- TODO: change path to conda-->
			<!-- Please note that downloading and installing the required packages with conda may take a while when running the workflow the first time. -->
			<conda name="conda" path2conda="/path/to/bin/conda" path2environments="${CONDA_ENV_PATH}"/>
		</wrappers>
		<executors>
			<local name="localHost" maxRunning="1" packageManagers="conda" default="true"/>
			<!-- TODO: replace with cluster if available -->
			<!-- see https://klugem.github.io/watchdog/Watchdog-manual.html#execution_environments for details on different executors-->
			<!--<sge name="cluster" slots="1" memory="5G" queue="TODO.q" packageManagers="conda" maxRunning="15" />-->
		</executors>
		<processBlock>
			<processTable name="reg" table="${regs}" disableExistenceCheck="true"/>
			<!-- TODO: if necessary change pattern for your bam files -->
			<processFolder name="bamfiles" folder="${bamfolder}" pattern="*.bam$" disableExistenceCheck="true"/>
		</processBlock>
	</settings>

	<!-- TODO: change to your email address or remove mail attribute -->
	<!-- see https://klugem.github.io/watchdog/Watchdog-manual.html#mail_server for details regarding email configuration-->
	<tasks mail="mustermann@example.com">

		<!-- compute AMSS for every input region-->
		<amssTask id="1" name="AMSS" processBlock="reg">	
			<parameter>
				<inputregs>{$regs}</inputregs>
				<out>${outputDir}/windows/</out>
				<strandness>${strandness}</strandness>
				<bams>${bamfolder}</bams>
				<!-- TODO: if necessary change pattern for your bam files-->
				<pattern>.bam$</pattern>
				<pseudocount>${pseudocount}</pseudocount>
				<numrandomizations>${numrandomizations}</numrandomizations>
				<sampleAnnotation>${sampleanno}</sampleAnnotation>
			</parameter>
			<streams>
				<stdout>${LOGS}/amss.{$regs}.out</stdout>
				<stderr>${LOGS}/amss.{$regs}.err</stderr>
			</streams>
		</amssTask>

		<!-- collects every final AMSS per input region into one file and creates annotation files-->
		<preDexseqTask id="2" name="annot">	
			<dependencies>
				<depends>1</depends>
			</dependencies>			
			<parameter>
				<annot>${outputDir}/annot/annotation_filled_up.gff</annot>
				<annot_fc>${outputDir}/annot/annotation_fc_filled_up.gff</annot_fc>
				<indir>${outputDir}/windows/</indir>
			</parameter>
			<streams>
				<stdout>${LOGS}/collect.out</stdout>
				<stderr>${LOGS}/collect.err</stderr>
			</streams>
		</preDexseqTask>

		<!-- calls feature counts on bam files-->
		<featureCountsTask id="3" name="featurecounts" processBlock="bamfiles">
			<dependencies>
				<depends>2</depends>
			</dependencies>
			<parameter>
				<annotation>${outputDir}/annot/annotation_fc_filled_up.gff</annotation>
				<input>{}</input>
				<output>${outputDir}/counts/[1].counts</output>
				<!-- TODO: change to strandness of experiment, either 0, 1 or 2-->
				<stranded>2</stranded>
				<countFragments>true</countFragments>
				<featureType>exonic_part</featureType>
				<multiMapping>true</multiMapping>
				<groupType>htname</groupType>
				<annotationType>GTF</annotationType>
			</parameter>
			<streams>
				<stdout>${LOGS}/featurecounts.[].out</stdout>
				<stderr>${LOGS}/featurecounts.[].err</stderr>
			</streams>
		</featureCountsTask>

		<!-- merges feature counts files into one-->
		<mergeFeatureCountsTask id="4" name="merge">
	  		<dependencies>
				<depends>3</depends>
			</dependencies>
	  		<parameter>
				<searchFolder>${outputDir}/counts/</searchFolder>
				<output>${outputDir}/counts/merged_counts.txt</output>
	  		</parameter>
	  		<streams>
				<stdout>${LOGS}/mergeFeature.out</stdout>
				<stderr>${LOGS}/mergeFeature.err</stderr>
			</streams>
		</mergeFeatureCountsTask>

		<!-- calls DEXSeq with own annotation file-->
		<DEXSeqTask id="5" name="dexseq">
			<dependencies>
				<depends>4</depends>
			</dependencies>
			<parameter>
				<countFile>${outputDir}/counts/merged_counts.txt</countFile>
				<flattedGTFAnnotation>${outputDir}/annot/annotation_filled_up.gff</flattedGTFAnnotation>
				<output>${outputDir}</output>
				<sampleAnnotation>${sampleanno}</sampleAnnotation>
				<testCondition>${test}</testCondition>
				<controlCondition>${control}</controlCondition>
			</parameter>
			<streams>
				<stderr>${LOGS}/DEXSeq.err</stderr>
				<stdout>${LOGS}/DEXSeq.out</stdout>
			</streams>
		</DEXSeqTask>

		<!-- collects AMSS and DEXSeq info and creates  output table with scores-->
		<quantCurveScoreTask id="6" name="score">
			<dependencies>
				<depends>5</depends>
			</dependencies>			
			<parameter>
				<sampleAnnotation>${sampleanno}</sampleAnnotation>
				<out>${outputDir}</out>
				<testCondition>${test}</testCondition>
				<controlCondition>${control}</controlCondition>
			</parameter>
			<streams>
				<stdout>${LOGS}/scores.out</stdout>
				<stderr>${LOGS}/scores.err</stderr>
			</streams>
		</quantCurveScoreTask>

	</tasks>
</watchdog>
